/*
 * About : back tracking,brute force
 * Author: hyerim0203@GitHub (tky9873@gmail.com)
 * Date  : 2020-09-07
 * URL   : https://www.acmicpc.net/problem/1038
/
# 감소하는 수
N = int(input())    

decreasing_number = {f"1-{i}":1 for i in range(0,10)}

def is_it(th, digits, big_number = 9, result=0):
    
    for i in range(big_number,digits-2,-1):
        try:
            th -= decreasing_number[f"{digits}-{i}"] # 자리 수에 해당하는 수 구함
        except:
            pass
        
        if th == N:
            return int("".join(map(str,range(i-1, (i-1)-digits, -1))))
            
        elif th < N:
            result = i*(10**(digits-1))
            th += decreasing_number[f"{digits}-{i}"] # 자리 수에 해당하는 수 구함
            return result + is_it(th, digits-1, big_number = i-1)

        
def add_dictionary(N): # 자리수 찾기
    digits = 1
    while True:
        if digits==1: # 한자리수
            th = 9 # 9번째까지 생김
            
        elif digits==2: # 두자리수
            for i in range(1,10):
                th += i # th번째까지 생김
                decreasing_number[f"{digits}-{i}"]=i # 각 맨앞자리수개

        else: # 세자리수 이상
            for i in range(digits-1,10): # 해당자리수-1이 최고 자리에 올수있는수
                add_th = 0
                for j in range(1, i):
                    try:
                        add_th += decreasing_number[f"{digits-1}-{j}"]
                    except:
                        pass
                    
                decreasing_number[f"{digits}-{i}"]=add_th # 해당숫자에서 추가되는 감소숫자 수
                th += add_th

        if th>N:
            a = is_it(th, digits)
            return a
        
        elif th==N:
            return int("".join(map(str,range(9, 9-digits, -1))))
        
        else:
            digits+=1

if N<=9:
    print(N)
elif N>1022:
    print(-1)
else:
    print(add_dictionary(N))
